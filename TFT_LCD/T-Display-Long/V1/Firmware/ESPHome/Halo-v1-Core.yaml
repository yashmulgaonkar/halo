#Define Project
substitutions:
  name: halo
  version: "25.3.5.3"
  device_description: ${name} - v${version}.

psram:
  mode: octal
  speed: 120MHz

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: esp-idf

esp32_improv:
  authorizer: none

external_components:
  - source: github://yashmulgaonkar/esphome-components
    components: [axs15231, sy6970]

spi:
  id: lily_spi
  type: quad
  clk_pin: 17
  data_pins:
    - 13
    - 18
    - 21
    - 14

captive_portal:

logger:
  level: DEBUG

globals:
  - id: cycleCounter
    type: int
    restore_value: no
    initial_value: '0'
  - id: temp_unit_changed
    type: bool
    initial_value: "true"

switch:
  - platform: template
    name: "Startup Light Blink"
    id: startup_light_blink
    icon: mdi:lightbulb
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
  - platform: template
    name: "24h Clock Format"
    id: time_format
    icon: mdi:clock-digital
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    entity_category: "config"

select:
  - platform: template
    name: Display Temperature Unit
    id: display_temperature_unit
    entity_category: "Config"
    options:
     - "Fahrenheit"
     - "Celsius"
     - "Kelvin"
    initial_option: "Fahrenheit"
    restore_value: true
    optimistic: true
    on_value:
      - globals.set:
          id: temp_unit_changed
          value: "true"

interval:
  - interval: 10s
    then:    
      if:
        condition:
          wifi.connected:
        then:
          - lvgl.widget.update:
              id: wifi_stat
              text_color: my_green
          - lvgl.widget.show:
              id: ym_image              
        else:
          - lvgl.widget.update:
              id: wifi_stat
              text_color: my_red

  - interval: 1s
    then:
      - script.execute: time_update  

  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) < 30;'
            - switch.is_on: startup_light_blink

          then:
            - light.turn_on:
                id: rgb_light
                effect: "Rainbow Effect With Custom Values"
            - lambda: 'id(cycleCounter) += 1;'

  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) > 30;'
            - lambda: 'return id(cycleCounter) < 31;'
            - switch.is_on: startup_light_blink

          then:
            - light.turn_off:
                id: rgb_light
            - lambda: 'id(cycleCounter) += 1;'              

api:
  on_client_connected:
      - delay: 1s
      - light.turn_off: rgb_light
      - lambda: 'id(cycleCounter) = 30;'    
  services:
    #Co2 Calibration Service
    - service: calibrate_co2_value
      variables:
        co2_ppm: float
      then:
        - scd4x.perform_forced_calibration:
            value: !lambda "return co2_ppm;"
            id: scd40
    - service: sen55_clean
      then:
        - sen5x.start_fan_autoclean: sen55    

i2c:
  - sda: 9
    scl: 48
    id: lily_i2c
  - sda: 15
    scl: 10
    id: touch_i2c

output:
  - platform: ledc
    pin: 1
    id: backlight
    #Datasheet suggests low-frequency PWM. Should prevent stability issues.
    frequency: 100Hz
  
display:
  - platform: axs15231
    id: lily_display
    spi_id: lily_spi
    dimensions:
      height: 640
      width: 180
    cs_pin: 12
    reset_pin: 16
    rotation: 0
    auto_clear_enabled: false

touchscreen:
  - platform: axs15231
    id: lily_touch
    display: lily_display
    i2c_id: touch_i2c
    interrupt_pin: GPIO11
    transform:
      mirror_x: false
      mirror_y: false
      swap_xy: false
    on_touch:
      - lambda: |-
            ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
            touch.x,
            touch.y,
            touch.x_raw,
            touch.y_raw
            );

web_server:
  port: 80

image:
  - file: https://yashmulgaonkar.github.io/assets/YM.png
    id: ym_logo
    resize: 25x25
    type: RGB565
    transparency: alpha_channel

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: my_orange
    red: 100%
    green: 50%
    blue: 0%
  - id: my_teal
    red: 0%
    green: 100%
    blue: 100%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%

time:
  - platform: homeassistant
    id: ha_time
    on_time_sync:
      - script.execute: time_update

script:
  - id: time_update
    then:
      - lvgl.label.update:
          id: timeVal
          text: !lambda |-
            static char time_buf[17];
            auto now = id(ha_time).now();
            bool is_pm = now.hour >= 12;
            int hour_12 = now.hour % 12;
            if (hour_12 == 0) {
              hour_12 = 12; // 12 AM/PM should be displayed as 12, not 0
            }
            if(id(time_format).state) {
              snprintf(time_buf, sizeof(time_buf), "%02d:%02d", now.hour, now.minute);
            }
            else {
              snprintf(time_buf, sizeof(time_buf), "%2d:%02d%s", hour_12, now.minute, is_pm ? "PM" : "AM");
            }
            return time_buf;

number:
  - platform: template
    name: SEN55 Temperature Offset
    id: sen55_temperature_offset
    restore_value: true
    initial_value: 6.0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "Â°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box
  - platform: template
    name: SEN55 Humidity Offset
    id: sen55_humidity_offset
    restore_value: true
    initial_value: 0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "%"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected    

sensor:
  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s

  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
      
  - platform: scd4x
    id: scd40
    co2:
      name: "CO2"
      id: "co2"
      on_value:
        then:
          - lvgl.label.update:
              id: co2_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%d", (int)x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 600;"
              then:
                - lvgl.label.update:
                    id: co2_value
                    text_color: my_green                     
              else:
                - if:
                    condition:
                      lambda: "return x <= 1000;"
                    then:
                      - lvgl.label.update:
                          id: co2_value
                          text_color: my_yellow                         
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 1500;"
                          then:
                            - lvgl.label.update:
                                id: co2_value
                                text_color: my_orange                                 
                          else:
                            - lvgl.label.update:
                                id: co2_value
                                text_color: my_red                                                                              
    automatic_self_calibration: false
    update_interval: 10s
    measurement_mode: "periodic"
    i2c_id: lily_i2c
    ambient_pressure_compensation_source: bme280pressure

  - platform: mics_4514
    id: mics4514
    nitrogen_dioxide:
      name: Nitrogen Dioxide
      id: "no2"
      on_value:
        then:
          - lvgl.label.update:
              id: no2_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 0.03;"  # Safe level typical indoors (ppm)
              then:
                - lvgl.label.update:
                    id: no2_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 0.06;"  # Slightly elevated level (ppm)
                    then:
                      - lvgl.label.update:
                          id: no2_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 0.1;"  # Moderately high level (ppm)
                          then:
                            - lvgl.label.update:
                                id: no2_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: no2_value
                                text_color: my_red  # High level, unsafe indoors (ppm)                          
    carbon_monoxide:
      name: Carbon Monoxide
      id: "co"
      on_value:
        then:
          - lvgl.label.update:
              id: co_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 15;"
              then:
                - lvgl.label.update:
                    id: co_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 30;"
                    then:
                      - lvgl.label.update:
                          id: co_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 36;"
                          then:
                            - lvgl.label.update:
                                id: co_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: co_value
                                text_color: my_red                      
    hydrogen:
      name: Hydrogen
      id: "h2"
      on_value:
        then:
          - lvgl.label.update:
              id: h2_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 0.4;"  # Safe level typical indoors
              then:
                - lvgl.label.update:
                    id: h2_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 1.0;"  # Slightly elevated level
                    then:
                      - lvgl.label.update:
                          id: h2_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 2.0;"  # Moderately high level
                          then:
                            - lvgl.label.update:
                                id: h2_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: h2_value
                                text_color: my_red  # High level, unsafe indoors                       
    methane:
      name: Methane
      id: "ch4"
      on_value:
        then:
          - lvgl.label.update:
              id: ch4_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 2.0;"  # Typical safe level
              then:
                - lvgl.label.update:
                    id: ch4_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 10.0;"  # Elevated but not critical
                    then:
                      - lvgl.label.update:
                          id: ch4_value
                          text_color: my_yellow
                    else:
                      - lvgl.label.update:
                          id: ch4_value
                          text_color: my_red  # Critical level                                        
    ethanol:
      name: Ethanol
      id: "ethanol"
      on_value:
        then:
          - lvgl.label.update:
              id: ethanol_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 0.5;"  # Safe level
              then:
                - lvgl.label.update:
                    id: ethanol_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 1.5;"  # Slightly elevated
                    then:
                      - lvgl.label.update:
                          id: ethanol_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 3.0;"  # Moderate level
                          then:
                            - lvgl.label.update:
                                id: ethanol_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: ethanol_value
                                text_color: my_red  # High level                       
    ammonia:
      name: Ammonia
      id: "nh3"
      on_value:
        then:
          - lvgl.label.update:
              id: nh3_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 0.5;"  # Safe level typical indoors
              then:
                - lvgl.label.update:
                    id: nh3_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 1.0;"  # Slightly elevated level
                    then:
                      - lvgl.label.update:
                          id: nh3_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 2.0;"  # Moderately high level
                          then:
                            - lvgl.label.update:
                                id: nh3_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: nh3_value
                                text_color: my_red  # High level, unsafe indoors                            
    update_interval: 10s
    i2c_id: lily_i2c
    address: 0x75

  - platform: bme280_i2c
    i2c_id: lily_i2c
    temperature:
      name: "BME280 Temperature"
      oversampling: 2x
      # filters:
      #   - lambda: |-
      #       return x;  
    pressure:
      name: "BME280 Pressure"
      id: bme280pressure
    humidity:
      name: "BME280 Humidity"    

  - platform: sen5x
    id: sen55
    pm_1_0:
      name: "PM <1Âµm Weight concentration"
      id: pm_1_0
      accuracy_decimals: 1
      on_value:
        then:
          - lvgl.label.update:
              id: pm1_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;          
    pm_2_5:
      name: "PM <2.5Âµm Weight concentration"
      id: pm_2_5
      accuracy_decimals: 1
      on_value:
        then:
          - lvgl.label.update:
              id: pm25_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;
          - lvgl.label.update:
              id: aqi_value
              text: !lambda |-
                float val = x; // PM2.5 value
                float aqi = 0.0;

                if (val <= 9.0) {
                  aqi = ((50.0 - 0.0) / (9.0 - 0.0)) * (val - 0.0) + 0.0;
                } else if (val <= 35.4) {
                  aqi = ((100.0 - 51.0) / (35.4 - 9.1)) * (val - 9.1) + 51.0;
                } else if (val <= 55.4) {
                  aqi = ((150.0 - 101.0) / (55.4 - 35.5)) * (val - 35.5) + 101.0;
                } else if (val <= 125.4) {
                  aqi = ((200.0 - 151.0) / (125.4 - 55.5)) * (val - 55.5) + 151.0;
                } else if (val <= 225.4) {
                  aqi = ((300.0 - 201.0) / (225.4 - 125.5)) * (val - 125.5) + 201.0;
                } else if (val <= 500.4) {
                  aqi = ((500.0 - 301.0) / (500.4 - 250.5)) * (val - 250.5) + 301.0;
                } else {
                  return "EVAC";
                }

                static char buffer[10];
                snprintf(buffer, sizeof(buffer), " %d", (int)aqi);
                return buffer;

          - lvgl.widget.update:
              id: aqi_widget
              bg_color: !lambda |-
                float val = x; // PM2.5 value
                float aqi = 0.0;

                if (val <= 9.0) {
                  aqi = ((50.0 - 0.0) / (9.0 - 0.0)) * (val - 0.0) + 0.0;
                } else if (val <= 35.4) {
                  aqi = ((100.0 - 51.0) / (35.4 - 9.1)) * (val - 9.1) + 51.0;
                } else if (val <= 55.4) {
                  aqi = ((150.0 - 101.0) / (55.4 - 35.5)) * (val - 35.5) + 101.0;
                } else if (val <= 125.4) {
                  aqi = ((200.0 - 151.0) / (125.4 - 55.5)) * (val - 55.5) + 151.0;
                } else if (val <= 225.4) {
                  aqi = ((300.0 - 201.0) / (225.4 - 125.5)) * (val - 125.5) + 201.0;
                } else if (val <= 500.4) {
                  aqi = ((500.0 - 301.0) / (500.4 - 250.5)) * (val - 250.5) + 301.0;
                } else {
                  aqi = 500.0;
                }

                // Return color based on AQI
                if (aqi <= 50) {
                  return lv_color_hex(0x76fa76); // Green
                } else if (aqi <= 100) {
                  return lv_color_hex(0xFFFF00); // Yellow
                } else if (aqi <= 150) {
                  return lv_color_hex(0xFFA500); // Orange
                } else if (aqi <= 200) {
                  return lv_color_hex(0xFF0000); // Red
                } else if (aqi <= 300) {
                  return lv_color_hex(0x800080); // Purple
                } else {
                  return lv_color_hex(0x800000); // Maroon
                }        

    pm_4_0:
      name: "PM <4Âµm Weight concentration"
      id: pm_4_0
      accuracy_decimals: 1
      on_value:
        then:
          - lvgl.label.update:
              id: pm4_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;       
    pm_10_0:
      name: "PM <10Âµm Weight concentration"
      id: pm_10_0
      accuracy_decimals: 1
      on_value:
        then:
          - lvgl.label.update:
              id: pm10_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;       
    temperature:
      name: "SEN55 Temperature"
      accuracy_decimals: 1
      filters:
        - offset: !lambda return -1.0 * id(sen55_temperature_offset).state;
      on_value:
        then:
          - if:
              condition:
                lambda: "return temp_unit_changed;"
              then:
                - lvgl.label.update:
                    id: temperature_units
                    text: !lambda |-
                      if(id(display_temperature_unit).state == "Fahrenheit")
                        return "\u00B0F";
                      else if(id(display_temperature_unit).state == "Kelvin")
                        return "K";
                      return "\u00B0C";
                - globals.set:
                    id: temp_unit_changed
                    value: "false"
          - lvgl.label.update:
              id: temperature_value
              text: !lambda |-
                static char buffer[10];
                if(id(display_temperature_unit).state == "Fahrenheit")
                  snprintf(buffer, sizeof(buffer), "%.01f", (x * 9.0 / 5.0) + 32.0);
                else if(id(display_temperature_unit).state == "Kelvin")
                  snprintf(buffer, sizeof(buffer), "%.01f", x + 273.15);
                else
                  snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x >= 18 && x <= 24;"  # Comfortable temperature range (Â°C)
              then:
                - lvgl.label.update:
                    id: temperature_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return (x > 24 && x <= 27) || (x >= 16 && x < 18);"  # Slightly uncomfortable (Â°C)
                    then:
                      - lvgl.label.update:
                          id: temperature_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return (x > 27 && x <= 30) || (x >= 10 && x < 16);"  # Moderately uncomfortable (Â°C)
                          then:
                            - lvgl.label.update:
                                id: temperature_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: temperature_value
                                text_color: my_red  # Extreme discomfort or unsafe (Â°C)
    humidity:
      name: "SEN55 Humidity"
      filters:
        - lambda: return x - id(sen55_humidity_offset).state;
      accuracy_decimals: 0
      on_value:
        then:
          - lvgl.label.update:
              id: rh_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%d", (int)x);
                return buffer;
          - if:
              condition:
                lambda: "return x >= 30 && x <= 50;"  # Optimal indoor comfort range (%)
              then:
                - lvgl.label.update:
                    id: rh_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return (x > 50 && x <= 60) || (x >= 20 && x < 30);"  # Slightly out of comfort range (%)
                    then:
                      - lvgl.label.update:
                          id: rh_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return (x > 60 && x <= 70) || (x >= 10 && x < 20);"  # Moderately uncomfortable (%)
                          then:
                            - lvgl.label.update:
                                id: rh_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: rh_value
                                text_color: my_red  # Very uncomfortable or potentially hazardous (%)                             
    voc:
      name: "SEN55 VOC"
      id: sen55_voc
      algorithm_tuning:
        #https://sensirion.com/media/documents/25AB572C/62B463AA/Sensirion_Engineering_Guidelines_SEN5x.pdf
        index_offset: 100
        learning_time_offset_hours: 72
        learning_time_gain_hours: 72
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
      on_value:
        then:
          - lvgl.label.update:
              id: voc_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%3d", (int)x);
                return buffer;
          - if:
              condition:
                lambda: "return x < 150;"
              then:
                - lvgl.label.update:
                    id: voc_value
                    text_color: my_green
              else:
                - if:
                    condition:
                      lambda: "return x <= 250;"
                    then:
                      - lvgl.label.update:
                          id: voc_value
                          text_color: my_yellow
                    else:
                      - if:
                          condition:
                            lambda: "return x <= 400;"
                          then:
                            - lvgl.label.update:
                                id: voc_value
                                text_color: my_orange
                          else:
                            - lvgl.label.update:
                                id: voc_value
                                text_color: my_red                      
    i2c_id: lily_i2c
    address: 0x69
    update_interval: 10s    

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

  - platform: template
    name: "Calibrate SCD40 To 420ppm"
    id: set_SCD40_calibrate
    on_press:
      - scd4x.perform_forced_calibration:
          value: 420
          id: scd40

  - platform: template
    name: "Clean SEN55"
    id: clean_sen55
    on_press:
      - sen5x.start_fan_autoclean: sen55

text_sensor:
    # Convert VOC Index To Text: 
    # https://sensirion.com/media/documents/02232963/6294E043/Info_Note_VOC_Index.pdf
    # https://sensirion.com/media/documents/ACD82D45/6294DFC0/Info_Note_Integration_VOC_NOx_Sensor.pdf
  - platform: template
    name: "VOC Quality"
    id: voc_quality
    icon: mdi:air-filter
    lambda: |-
      if (id(sen55_voc).state < 80) {
        return std::string("Improved");} 
      else if (id(sen55_voc).state < 150) {
        return std::string("Normal");} 
      else if (id(sen55_voc).state < 250) {
        return std::string("Abnormal");} 
      else if (id(sen55_voc).state < 400) {
        return std::string("Very abnormal");} 
      else {
        return std::string("Extremely abnormal");}    

light:
  - platform: esp32_rmt_led_strip
    id: rgb_light
    name: "Halo"
    pin: GPIO47
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 11
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 500ms
          update_interval: 500ms
          min_brightness: 10%
          max_brightness: 50%
      - addressable_rainbow:
          name: Rainbow Effect With Custom Values
          speed: 10
          width: 50
  - platform: monochromatic
    output: backlight
    name: "Display Backlight"
    restore_mode: ALWAYS_ON

lvgl:
  displays:
    - lily_display
  touchscreens:
    - lily_touch
  buffer_size: 100%
  pages:            
    - id: main_page
      bg_color: my_black
      scrollbar_mode: "OFF"
      widgets:
        - image:
            id: ym_image          
            src: ym_logo
            align: CENTER
            x: 80
            y: -309
        - label:
            id: timeVal
            align: LEFT_MID
            text_font: montserrat_18
            text_color: my_white
            x: 2
            y: -309
            text: "00:00AM"
        - label:
            id: wifi_stat
            align: CENTER
            text_font: montserrat_18
            text_color: my_gray
            x: 42
            y: -309
            text: "\uF1EB"
# AQI box
        - obj:
            id: aqi_widget
            x: 0
            y: 24
            width: 180
            height: 42
            bg_color: 0x76fa76
            border_width: 0
        - label:
            id: aqi_label
            align: LEFT_MID
            text_font: montserrat_28
            text_color: my_black
            long_mode: WRAP
            x: 2
            y: -275
            text: "AQI:"
        - label:
            id: aqi_value
            align: LEFT_MID
            text_font: montserrat_28
            text_color: my_black
            long_mode: WRAP
            x: 90
            y: -275
            text: "000"                              
# Temperature box
        - label:
            id: temperature_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: -246
            text: "TEMP:"               
        - label:
            id: temperature_value
            align: CENTER
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: 0
            y: -234
            text: "000.0" 
        - label:
            id: temperature_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -8
            y: -234
            text: "\u00B0F"                     
        - line:
            points:
              - 0, 106
              - 180, 106
            line_width: 1
            line_color: 0x00dfff
# CO2 box
        - label:
            id: co2_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: -205
            text: "CO2:"               
        - label:
            id: co2_value
            align: CENTER
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: 0
            y: -193
            text: "0000" 
        - label:
            id: co2_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: -193
            text: "PPM"                     
        - line:
            points:
              - 0, 147
              - 180, 147
            line_width: 1
            line_color: 0x00dfff                              
# PM1 box
        - label:
            id: pm1_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: -164
            text: "PM1:"               
        - label:
            id: pm1_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: -152
            text: "000.0" 
        - label:
            id: pm1_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: -152
            text: "ug/m3"                     
        - line:
            points:
              - 0, 188
              - 180, 188
            line_width: 1
            line_color: 0x00dfff             
# PM2.5 box
        - label:
            id: pm25_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: -123
            text: "PM2.5:"               
        - label:
            id: pm25_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: -111
            text: "000.0" 
        - label:
            id: pm25_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: -111
            text: "ug/m3"                     
        - line:
            points:
              - 0, 229
              - 180, 229
            line_width: 1
            line_color: 0x00dfff              
# PM4 box
        - label:
            id: pm4_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: -82
            text: "PM4:"               
        - label:
            id: pm4_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: -70
            text: "000.0" 
        - label:
            id: pm4_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: -70
            text: "ug/m3"                     
        - line:
            points:
              - 0, 270
              - 180, 270
            line_width: 1
            line_color: 0x00dfff 
# PM10 box
        - label:
            id: pm10_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: -41
            text: "PM10:"               
        - label:
            id: pm10_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: -29
            text: "000.0" 
        - label:
            id: pm10_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: -29
            text: "ug/m3"                     
        - line:
            points:
              - 0, 311
              - 180, 311
            line_width: 1
            line_color: 0x00dfff
# VOC box
        - label:
            id: voc_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 0
            text: "VOC:"               
        - label:
            id: voc_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 12
            text: "000.0"               
        - label:
            id: voc_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 12
            text: "IDX"                     
        - line:
            points:
              - 0, 352
              - 180, 352
            line_width: 1
            line_color: 0x00dfff
# CO box
        - label:
            id: co_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 41
            text: "CO:"               
        - label:
            id: co_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 53
            text: "000.0" 
        - label:
            id: co_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 53
            text: "PPM"                     
        - line:
            points:
              - 0, 393
              - 180, 393
            line_width: 1
            line_color: 0x00dfff
# Ethanol box
        - label:
            id: ethanol_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: SCROLL
            width: 40
            x: 2
            y: 82
            text: "C2H5OH:"           
        - label:
            id: ethanol_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 94
            text: "000.0" 
        - label:
            id: ethanol_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 94
            text: "PPM"                     
        - line:
            points:
              - 0, 434
              - 180, 434
            line_width: 1
            line_color: 0x00dfff
# Hydrogen box
        - label:
            id: h2_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 124
            text: "H2:"              
        - label:
            id: h2_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 135
            text: "000.0" 
        - label:
            id: h2_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 135
            text: "PPM"                     
        - line:
            points:
              - 0, 475
              - 180, 475
            line_width: 1
            line_color: 0x00dfff
# NO2 box
        - label:
            id: no2_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 165
            text: "NO2:"              
        - label:
            id: no2_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 176
            text: "000.0" 
        - label:
            id: no2_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 176
            text: "PPM"                     
        - line:
            points:
              - 0, 516
              - 180, 516
            line_width: 1
            line_color: 0x00dfff
# NH3 box
        - label:
            id: nh3_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 206
            text: "NH3:"              
        - label:
            id: nh3_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 217
            text: "000.0" 
        - label:
            id: nh3_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 217
            text: "PPM"                     
        - line:
            points:
              - 0, 557
              - 180, 557
            line_width: 1
            line_color: 0x00dfff
# CH4 box
        - label:
            id: ch4_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 247
            text: "CH4:"              
        - label:
            id: ch4_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 258
            text: "000.0" 
        - label:
            id: ch4_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 258
            text: "PPM"                     
        - line:
            points:
              - 0, 598
              - 180, 598
            line_width: 1
            line_color: 0x00dfff
# RH box
        - label:
            id: rh_label
            align: LEFT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: 2
            y: 287
            text: "RH:"              
        - label:
            id: rh_value
            align: RIGHT_MID
            text_font: montserrat_28
            text_color: my_white
            long_mode: WRAP
            x: -51
            y: 299
            text: "000.0" 
        - label:
            id: rh_units
            align: RIGHT_MID
            text_font: montserrat_14
            text_color: my_white
            long_mode: WRAP
            x: -2
            y: 299
            text: "%"
